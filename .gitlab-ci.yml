image: ubuntu

before_script:
  ##
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  ##
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDNo1VaFrfByas+bgHQGATcsvaskJnESfI35avSH07a/IhrZEoQ2Yf2xOJx1hZslVsPEmLQdAu82AM/X+ZVY9K3J/qCtWJBlKDT4SVeFBpugKV4762c21qvletNgmAf1YHg0WQm02yITwLDDgZQqCYjbz1agAojQSjitoIa5IIf3KlUlN3LeqECtUuJSRUZERBx+gON/EhRGgQWssZqud4fj/YtFq+mhUvQZUqtJmIp4rcFMtYOwUUYxLfZkYWbEzvBGgCzoYROcNi29fefXsWDg4YMPdmgM9xG/j0cYSvD9WP0pm3qwZNHK/WBZZ3+05dKOLibLvIhrznZZqWWs807 <p.hofer@edu.fh-wien.ac.at>

  ##
  ## Create the SSH directory and give it the right permissions
  ##
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

  ##
  ## Use ssh-keyscan to scan the keys of your private server. Replace gitlab.com
  ## with your own domain name. You can copy and repeat that command if you have
  ## more than one server to connect to.
  ##
  - ssh-keyscan your-server >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

  ##
  ## Alternatively, assuming you created the SSH_SERVER_HOSTKEYS variable
  ## previously, uncomment the following two lines instead.
  ##
  #- echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts'
  #- chmod 644 ~/.ssh/known_hosts

  ##
  ## You can optionally disable host key checking. Be aware that by adding that
  ## you are suspectible to man-in-the-middle attacks.
  ## WARNING: Use this only with the Docker executor, if you use it with shell
  ## you will overwrite your user's SSH config.
  ##
  #- '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

  ##
  ## Optionally, if you will be using any Git commands, set the user name and
  ## email.
  ##
  - git config --global user.email "p.hofer@edu.fh-wien.ac.at"
  - git config --global user.name "repertoiredo"


Test SSH:
  script:
  # try to connect to your aws server
  - scp index.html ec2-user@your-server:/home/ec2-user/www.18.194.159.55.com

  # try to clone yourself. A *PUBLIC* key paired to the SSH_PRIVATE_KEY was added as deploy key to this repository
  - touch test.md
